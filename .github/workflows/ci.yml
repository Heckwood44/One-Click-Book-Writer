name: One Click Book Writer CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-generate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
        
    - name: Run Canvas Compliance Smoke Test
      run: |
        python tests/smoke_test.py
      continue-on-error: true
      
    - name: Run full pipeline test
      run: |
        python prompt_router.py data/generate_chapter_full_extended.json --chapter 1
      continue-on-error: true
      
    - name: Generate CI Summary Report
      run: python scripts/generate_ci_summary.py
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-outputs
        path: |
          output/
          ci_summary.json
          ci_report.md
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let report = '## CI/CD Pipeline Results\n\n';
          
          if (fs.existsSync('ci_summary.json')) {
            const summary = JSON.parse(fs.readFileSync('ci_summary.json', 'utf8'));
            
            report += `- **Status**: ${summary.pipeline_status}\n`;
            report += `- **Quality Score**: ${summary.quality_score.toFixed(3)}\n`;
            report += `- **Canvas Compliance**: ${summary.canvas_compliance}\n`;
            report += `- **Review Required**: ${summary.review_required ? 'Yes' : 'No'}\n\n`;
            
            if (summary.next_recommendations) {
              report += '**Recommendations:**\n';
              summary.next_recommendations.forEach(rec => {
                report += `- ${rec}\n`;
              });
            }
          } else {
            report += '‚ùå Pipeline execution failed - no summary available';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          }); 