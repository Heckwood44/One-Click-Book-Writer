name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.12
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=core --cov=gui --cov-report=xml --cov-report=term-missing --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Check coverage threshold
      run: |
        coverage report --fail-under=80
        if [ $? -ne 0 ]; then
          echo "‚ùå Coverage is below 80% threshold"
          exit 1
        else
          echo "‚úÖ Coverage is above 80% threshold"
        fi
    
    - name: Run security tests
      run: |
        python -m pytest tests/test_security.py -v
    
    - name: Run promotion guardrails tests
      run: |
        python -m pytest tests/test_promotion_guardrails.py -v
    
    - name: Run architecture tests
      run: |
        python -m pytest tests/test_architecture.py -v
    
    - name: Run smoke test
      run: |
        python tests/smoke_test.py
    
    - name: Generate test report
      run: |
        python -m pytest tests/ --cov=core --cov=gui --cov-report=html --cov-report=term-missing
        echo "Test coverage report generated in htmlcov/index.html"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml
          pytest.xml

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        flake8 core/ gui/ tests/ --max-line-length=120 --ignore=E501,W503
        black --check core/ gui/ tests/
    
    - name: Run type checking
      run: |
        mypy core/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run security tests
      run: |
        python -m pytest tests/test_security.py -v --tb=short
    
    - name: Check for secrets in code
      run: |
        # Check for potential secrets in code
        if grep -r "sk-" core/ gui/ tests/ 2>/dev/null; then
          echo "‚ùå Potential API keys found in code"
          exit 1
        fi
        if grep -r "password" core/ gui/ tests/ 2>/dev/null; then
          echo "‚ùå Potential passwords found in code"
          exit 1
        fi
        echo "‚úÖ No obvious secrets found in code"

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_enhanced_pipeline.py::TestEnhancedPipelineIntegration -v
    
    - name: Run full pipeline test
      run: |
        python -m pytest tests/test_core_modules.py -v

  report:
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate comprehensive report
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        python -m pytest tests/ --cov=core --cov=gui --cov-report=term-missing | grep "TOTAL" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        python -m pytest tests/ --tb=short -q >> $GITHUB_STEP_SUMMARY
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage.xml', 'utf8');
          const match = coverage.match(/<coverage.*?line-rate="([^"]*)"/);
          const coveragePercent = match ? Math.round(parseFloat(match[1]) * 100) : 0;
          
          const comment = `## üß™ Test Results
          
          **Coverage:** ${coveragePercent}%
          **Status:** ${coveragePercent >= 80 ? '‚úÖ PASS' : '‚ùå FAIL'}
          
          Coverage threshold: 80%
          
          ${coveragePercent < 80 ? '‚ö†Ô∏è Coverage is below threshold. Please add more tests.' : 'üéâ All tests passing with good coverage!'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 